-- TASK 1

-- INSERT INTO actors (name, surname, age, sex)
-- VALUES
-- ("Arnold", "Schwarzenegger", 75, "m"),
-- ("Bruce", "Willis", 67, "m"),
-- ("Tom", "Cruise", 60, "m"),
-- ("Brad", "Pitt", 53, "m"),
-- ("Will", "Smith", 54, "m"),
-- ("Leonardo", "DiCaprio", 48, "m"),
-- ("Tom", "Hanks", 66, "m"),
-- ("Johnny", "Depp", 59, "m"),
-- ("Harrison", "Ford", 80, "m"),
-- ("Sandra", "Bullock", 58, "f"),
-- ("Halle", "Berry", 56, "f"),
-- ("Julia", "Roberts", 55, "f"),
-- ("Kate", "Winslet", 47, "f"),
-- ("Angelina", "Jolie", 47, "f");

-- INSERT INTO movies (name_movie, release, budjet, director_id)
-- VALUES
-- ("Titanic", 1997, 200000000, 1),
-- ("Catch me if you can", 2002, 52000000, 2),
-- ("Forrest Gump", 1994, 55000000, 3),
-- ("Terminator 2 ", 1991, 102000000, 1),
-- ("Mr. & Mrs. Smith", 2005, 110000000, 4),
-- ("Indiana Jones 3", 1989, 48000000, 2),
-- ("Mission impossible 1", 1996, 80000000, 5),
-- ("Mission impossible 2", 2000, 125000000, 6),
-- ("Charlie and the Chocolate Factory", 2005, 150000000, 7),
-- ("Speed", 1994, 25000000, 8),
-- ("Lake House", 2006, 40000000, 9),
-- ("Pretty women", 1990, 190000000, 10),
-- ("Oceanâ€™s eleven", 2001, 184000000, 11),
-- Larry Crowne", 2011, 30000000, NULL),
-- ("Bad boys 1", 1995, 19000000, 12),
-- ("Bad boys 2", 2003, 130000000, 12),
-- ("Men in black", 1997, 90000000, 13),
-- ("The Martian", 2015, 108000000, 14),
-- ("Interstellar", 2014, 165000000, 15);

-- INSERT INTO actors_movies (movies_id, actors_id)
-- VALUES
-- (1, 6),
-- (1, 13),
-- (2, 6),
-- (2, 7),
-- (3, 7),
-- (4, 1),
-- (5, 4),
-- (5, 14),
-- (6, 9),
-- (7, 3),
-- (8, 3),
-- (9, 8),
-- (10, 10),
-- (11, 10),
-- (12, 12),
-- (13, 4),
-- (13, 12),
-- (14, 7),
-- (14, 12),
-- (15, 5),
-- (16, 5),
-- (17, 5),
-- (18, "NULL"),
-- (19, "NULL");

-- INSERT INTO directors (name, surname, age)
-- VALUES
-- ("James", "Cameron", 68),
-- ("Steven", "Spilberg", 75),
-- ("Robert", "Zemeckis", 70),
-- ("Doug", "Liman", 57),
-- ("Brian", "De Palma", 82),
-- ("John", "Woo", 76),
-- ("Tim", "Berton", 64),
-- ("Jan", "De Bont", 79),
-- ("Alejandro", "Agresti", 61),
-- ("Garry", "Marshal", 82),
-- ("Steven", "Sodeberg", 59),
-- ("Michael", "Bay", 57),
-- ("Barry", "Sonnenfeld", 69),
-- ("Simon", "Kinberg", 49),
-- ("Christopher", "Nolan", 52),
-- ("Martin", "Scorsese", 80),
-- ("Stanley", "Kubrick", 70),
-- ("Woody", "Allen", 87);

-- INSERT INTO Bank_accounts (director_id, actors_id, account_number)
-- VALUES
-- ("NULL", 1, 1264567),
-- ("NULL", 2, 1296567),
-- ("NULL", 3, 1234567),
-- ("NULL", 4, 1294167),
-- ("NULL", 5, 1594567),
-- ("NULL", 6, 1794567),
-- ("NULL", 7, 1994567),
-- ("NULL", 8, 2294567),
-- ("NULL", 9, 1294567),
-- ("NULL", 10, 2297667),
-- ("NULL", 11, 3994567),
-- ("NULL", 12, 4294567),
-- ("NULL", 13, 5294567),
-- ("NULL", 14, 6294567),
-- (1, "NULL", 7294567),
-- (2, "NULL", 8294567),
-- (3, "NULL", 9294567),
-- (4, "NULL", 1294561),
-- (5, "NULL", 1294562),
-- (6, "NULL", 1294563),
-- (7, "NULL", 1294564),
-- (8, "NULL", 1294565),
-- (9, "NULL", 1294566),
-- (10, "NULL", 1294567),
-- (11, "NULL", 1294568),
-- (12, "NULL", 1294569),
-- (13, "NULL", 1294521),
-- (14, "NULL", 1294537),
-- (15, "NULL", 1294547),
-- (16, "NULL", 1294558),
-- (17, "NULL", 1294557),
-- (18, "NULL", 1294577);

-- TASK 2
-- ALTER TABLE bank_accounts
-- ADD COLUMN "finance" INTEGER
-- DEFAULT NULL;

-- TASK 3
-- SELECT directors.name, directors.surname, SUM(movies.budjet) AS total_budjet
-- FROM movies
-- JOIN directors ON movies.director_id = directors.director_id
-- GROUP BY directors.director_id
-- ORDER BY total_budjet DESC
-- LIMIT 10;

-- TASK 4
-- SELECT actors.surname
-- FROM actors
-- LEFT JOIN actors_movies ON actors.actors_id = actors_movies.actors_id
-- WHERE actors_movies.actors_id IS NULL;

-- TASK 5


-- TASK 6
-- SELECT directors.name, directors.surname, movies.name_movie
-- FROM directors
-- INNER JOIN movies ON directors.director_id == movies.director_id
-- WHERE movies.release <= 2000;

-- TASK 7

-- TASK 8
-- ALTER TABLE movies
-- ADD COLUMN "rating" INTEGER;

-- TASK 9
-- SELECT directors.name, directors.surname, movies.name_movie, movies.rating
-- FROM directors
-- INNER JOIN movies ON directors.director_id == movies.director_id
-- WHERE movies.release <= 2000 AND movies.rating <= 5;

-- TASK 10

